{"version":3,"file":"static/js/369.376c24dc.chunk.js","mappings":"0QAEaA,EAAWC,EAAAA,GAAAA,GAAH,sgB,SCmDrB,EAjDmB,SAAC,GAA6C,IAAD,IAA1CC,OAAUC,EAAgC,EAAhCA,eAAgBC,EAAgB,EAAhBA,QAE9C,GAAmC,OAA/BD,EAAeE,YAEnB,OACE,UAACL,EAAD,YACE,iBAAKM,UAAU,eAAf,WACE,gBACEC,IACEJ,EAAeE,YAAYG,SAA3B,SACIL,EAAeE,YAAYI,QAAQ,IAAK,IAD5C,yCAEsCN,EAAeE,aAEvDK,IAAI,SACJC,MAAM,WAER,gBAAIL,UAAU,sBAAd,WACE,2BACE,iCADF,IACgBH,EAAeS,KAAOT,EAAeS,KAArC,aAEhB,2BACE,sCACA,eAAGN,UAAU,WAAb,cAA0BH,EAAeU,gBAE3C,2BACE,mCACCV,EAAeW,OAASX,EAAeW,OAAvC,oBAIP,gBAAKR,UAAU,UAAf,UACE,uBAAIF,QAIX,E,oBCrCYW,EAAgBd,EAAAA,GAAAA,GAAH,mGCqD1B,EAhDqB,WACnB,OAA8Be,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,IAAU,MAAtBD,QAIFE,EAAU,mCAAG,sGAEfH,GAAa,GAFE,SAGWI,EAAAA,EAAAA,aAAsBH,GAHjC,gBAGPI,EAHO,EAGPA,QACRP,EAAWO,GAJI,gDAMfC,QAAQC,MAAR,MANe,yBAQfP,GAAa,GARE,4EAAH,qDAkChB,OARAQ,EAAAA,EAAAA,YAAU,WACQ,OAAZP,GACJE,GAED,GAAE,CAACF,KAKF,SAACN,EAAD,UACGI,GAAY,SAACU,EAAA,EAAD,IArBC,OAAZZ,IACAA,EAAQa,OAAS,EACZb,EAAQc,KAAI,SAAA7B,GACjB,OAAO,SAAC,EAAD,CAA4BA,OAAQA,GAAnBA,EAAO8B,GAChC,KAEI,6EAkBV,C","sources":["components/ReviewItem/ReviewItem.styled.js","components/ReviewItem/ReviewItem.jsx","components/MovieReviews/MovieReviews.styled.js","components/MovieReviews/MovieReviews.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledLi = styled.li`\n  list-style-type: none;\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\n  border-radius: 5px;\n  transition: 0.3s;\n\n  &:hover {\n    box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2);\n  }\n\n  & li {\n    list-style-type: none;\n    font-size: 22px;\n  }\n\n  & .author__info {\n    padding: 35px 30px 10px;\n    display: flex;\n    align-items: center;\n    margin-bottom: 15px;\n  }\n\n  & .reviews {\n    padding: 25px;\n    font-style: italic;\n  }\n\n  & .username {\n    color: gray;\n  }\n`;\n","import React from 'react';\nimport { StyledLi } from './ReviewItem.styled';\nimport { PropTypes } from 'prop-types';\n\nconst ReviewItem = ({ author: { author_details, content } }) => {\n\n  if (author_details.avatar_path === null) return;\n\n  return (\n    <StyledLi>\n      <div className=\"author__info\">\n        <img\n          src={\n            author_details.avatar_path.includes(`https`)\n              ? author_details.avatar_path.replace('/', '')\n              : `https://image.tmdb.org/t/p/w500${author_details.avatar_path}`\n          }\n          alt=\"avatar\"\n          width=\"200px\"\n        />\n        <ul className=\"author__description\">\n          <li>\n            <b>Name:</b> {author_details.name ? author_details.name : `hidden`}\n          </li>\n          <li>\n            <b>Username:</b>\n            <i className=\"username\">@{author_details.username}</i>\n          </li>\n          <li>\n            <b>Rating:</b>\n            {author_details.rating ? author_details.rating : `unknown`}\n          </li>\n        </ul>\n      </div>\n      <div className=\"reviews\">\n        <q>{content}</q>\n      </div>\n    </StyledLi>\n  );\n};\n\nReviewItem.propTypes = {\n  author: PropTypes.shape({\n    author_details: PropTypes.shape({\n      avatar_path: PropTypes.string,\n      name: PropTypes.string,\n      username: PropTypes.string,\n      rating: PropTypes.number,\n    }),\n    content: PropTypes.string.isRequired,\n  }),\n};\n\nexport default ReviewItem;\n","import styled from 'styled-components';\n\nexport const StyledReviews = styled.ul`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n`;\n","import Loader from 'components/Loader/Loader';\nimport ReviewItem from 'components/ReviewItem/ReviewItem';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport movieApi from 'service/movieAPI';\nimport { StyledReviews } from './MovieReviews.styled';\n\nconst MovieReviews = () => {\n  const [reviews, setReviews] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams(null);\n\n  // Fetch reviews from DB\n\n  const getReviews = async () => {\n    try {\n      setIsLoading(true);\n      const { results } = await movieApi.fetchReviews(movieId);\n      setReviews(results);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Markup for review block\n\n  const createReviewBlock = () => {\n    if (reviews === null) return false;\n    if (reviews.length > 0) {\n      return reviews.map(author => {\n        return <ReviewItem key={author.id} author={author} />;\n      });\n    }\n    return <h1>No one has left a review for this movie yet...</h1>;\n  };\n\n  // Get reviews by click\n\n  useEffect(() => {\n    if (movieId === null) return;\n    getReviews();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [movieId]);\n\n  // Render\n\n  return (\n    <StyledReviews>\n      {isLoading ? <Loader /> : createReviewBlock()}\n    </StyledReviews>\n  );\n};\n\nexport default MovieReviews;\n"],"names":["StyledLi","styled","author","author_details","content","avatar_path","className","src","includes","replace","alt","width","name","username","rating","StyledReviews","useState","reviews","setReviews","isLoading","setIsLoading","movieId","useParams","getReviews","movieApi","results","console","error","useEffect","Loader","length","map","id"],"sourceRoot":""}