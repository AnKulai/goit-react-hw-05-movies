{"version":3,"file":"static/js/593.1f906f06.chunk.js","mappings":"gQAEaA,EAAgBC,EAAAA,GAAAA,IAAH,0H,SC8B1B,EA5BmB,SAAC,GAAiD,IAAD,IAA9CC,KAAQC,EAAsC,EAAtCA,aAAcC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,UAGhD,OACE,8BACGF,IACC,UAACH,EAAD,YACE,gBACEM,IAAG,yCAAoCH,GACvCI,MAAM,QACNC,IAAI,MAEN,wBAAKJ,KACL,qCAAaC,EAAb,YAKT,E,8BCpBYI,EAAyBR,EAAAA,GAAAA,IAAH,g/BCgDnC,EA3CqB,WACnB,OAA8BS,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,IAAU,MAAtBD,QAIFE,EAAU,mCAAG,sGAEfH,GAAa,GAFE,SAGQI,EAAAA,EAAAA,aAAsBH,GAH9B,gBAGPb,EAHO,EAGPA,KACRU,EAAWV,GAJI,gDAMfiB,QAAQC,MAAR,MANe,yBAQfN,GAAa,GARE,4EAAH,qDA6BhB,OARAO,EAAAA,EAAAA,YAAU,WACQ,OAAZN,GACJE,GAED,GAAE,CAACF,KAKF,SAACN,EAAD,UACGI,GAAY,SAACS,EAAA,EAAD,IAhBC,OAAZX,GACGA,EAAQY,KAAI,SAAArB,GAAI,OAAI,SAAC,EAAD,CAA+BA,KAAMA,GAApBA,EAAKsB,QAA1B,KAkB1B,C","sources":["components/CreditCard/CreditCard.styled.js","components/CreditCard/CreditCard.jsx","components/MovieCredits/MovieCredits.styled.js","components/MovieCredits/MovieCredits.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledCredits = styled.div`\n  text-align: center;\n\n  & h2 {\n    font-size: 25px;\n  }\n  & p {\n    font-size: 22px;\n  }\n`;\n","import React from 'react';\nimport { StyledCredits } from './CreditCard.styled';\nimport { PropTypes } from 'prop-types';\n\nconst CreditCard = ({ cast: { profile_path, name, character } }) => {\n  // Cast card markup\n\n  return (\n    <>\n      {profile_path && (\n        <StyledCredits>\n          <img\n            src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n            width=\"250px\"\n            alt=\"\"\n          />\n          <h2>{name}</h2>\n          <p>Charter: {character}: </p>\n        </StyledCredits>\n      )}\n    </>\n  );\n};\n\nCreditCard.propTypes = {\n  cast: PropTypes.shape({\n    profile_path: PropTypes.string,\n    name: PropTypes.string.isRequired,\n    character: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default CreditCard;\n","import styled from 'styled-components';\n\nexport const StyledReviewsContainer = styled.div`\n  width: 100%;\n  /* display: grid;\n  grid-template-columns: repeat(4, 1fr); */\n  margin-top: 30px;\n  display: flex;\n  gap: 20px;\n  overflow-x: scroll;\n\n\n  ::-webkit-scrollbar {\n    width: 12px; /* ширина всей полосы прокрутки */\n  }\n\n  ::-webkit-scrollbar-track {\n    background: red; /* цвет зоны отслеживания */\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background-color: black; /* цвет бегунка */\n    border-radius: 20px; /* округлось бегунка */\n    border: 3px solid black; /* отступ вокруг бегунка */\n  }\n`;\n","import CreditCard from 'components/CreditCard/CreditCard';\nimport Loader from 'components/Loader/Loader';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport movieApi from 'service/movieAPI';\nimport { StyledReviewsContainer } from './MovieCredits.styled';\n\nconst MovieCredits = () => {\n  const [credits, setCredits] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams(null);\n\n  // Fetch movie credits\n\n  const getCredits = async () => {\n    try {\n      setIsLoading(true);\n      const { cast } = await movieApi.fetchCredits(movieId);\n      setCredits(cast);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Create Credits card\n\n  const createCreditsCard = () => {\n    if (credits === null) return false;\n    return credits.map(cast => <CreditCard key={cast.cast_id} cast={cast} />);\n  };\n\n  // Load credits from DB\n\n  useEffect(() => {\n    if (movieId === null) return;\n    getCredits();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [movieId]);\n\n  // Render\n\n  return (\n    <StyledReviewsContainer>\n      {isLoading ? <Loader /> : createCreditsCard()}\n    </StyledReviewsContainer>\n  );\n};\n\nexport default MovieCredits;\n"],"names":["StyledCredits","styled","cast","profile_path","name","character","src","width","alt","StyledReviewsContainer","useState","credits","setCredits","isLoading","setIsLoading","movieId","useParams","getCredits","movieApi","console","error","useEffect","Loader","map","cast_id"],"sourceRoot":""}